#!/bin/bash

#set -eufo pipefail
set -efo pipefail
trap 'echo "$0: line ${LINENO}: exiting because of error";exit 1' ERR

source $(dirname $0)/bash_helpers/bash_helpers

while getopts ":-:" OPTIONS; do 
  case $OPTIONS in 
  *) case $OPTARG in
  u|username) getarg username ;;
  n|namespace) getarg dockerhub_namespace ;;
  p|private) dockerhub_private="true" ;;
  s|short) short_output=1 ;;
esac; esac; done
shift $((OPTIND - 1))

read_rc_file

: ${cookie_dir:="${HOME}/baufismart_cookies"}
: ${jwt_file:="${cookie_dir}/dockerhub_jwt"}
: ${dockerhub_namespace:="${username}"}
: ${short_output:="0"}

mkdir -p $cookie_dir

[[ -z "$username" ]] && { echo "username must be specified." >&2; exit 1; }

if [[ "$#" -eq 0 ]];then
  :
  ${0} help

elif [[ "$1" == "help" ]];then shift
  echo "${0}"
  cat ${0} \
    | grep '^elif' \
    | sed \
      -e 's/^elif \[\+ "\$1" =\+ "//g' \
      -e 's/" \]\+;then *\(shift\)* *\(##\)*\(.*\)$/ \2\3/g' \
      -e 's/^/    /g' \
    || true

elif [[ "$1" = "login" ]]; then
  shift
  response="$( curl -s \
    -X POST \
    -H "Content-Type:application/json" \
    --data-binary "{\"username\":\"${username}\",\"password\":\"$(get_password)\"}" \
    "https://hub.docker.com/v2/users/login/" )"
  jq -r '.token' <<<"$response" > ${jwt_file}

elif [[ "$1" = "check_login" ]]; then
  if [[ -r "${jwt_file}" ]];then
    cat ${jwt_file} \
      | sed 's/^[^.]*\.//g' \
      | base64 -d 2>/dev/null \
      | jq '.exp' \
      | xargs -I"{}" wcalc -q "({} - $(date +%s) ) > 1" \
      | ( grep "1" >/dev/null || $0 login ) \
      || true

  else
    $0 login
  fi

elif [[ "$1" = "create" ]]; then
  shift
  $0 check_login
  dockerhub_repo_name="$1";shift; [[ -z "$dockerhub_repo_name" ]] && { echo "parameter missing" >&2; exit 1; }
  github_repo="$1";shift; [[ -z "$github_repo" ]] && { echo "parameter missing" >&2; exit 1; }
  # user/repo
  : ${dockerhub_private:="false"}
json="$(cat <<EOF
{
  "name": "${dockerhub_repo_name}",
  "namespace": "${dockerhub_namespace}",
  "description": "${dockerhub_repo_name}",
  "vcs_repo_name": "${github_repo}",
  "provider": "github",
  "dockerhub_repo_name": "${dockerhub_namespace}/${dockerhub_repo_name}",
  "is_private": ${dockerhub_private},
  "active": true,
  "build_tags": [
    {
      "name": "latest",
      "source_type": "Branch",
      "source_name": "master",
      "dockerfile_location": "/"
    },
    {
      "name": "{sourceref}",
      "source_type": "Tag",
      "source_name": "/^[0-9.]*$/",
      "dockerfile_location": "/"
    }
  ]
}
EOF
)"

  echo "$json" | jq -c . \
  | curl -s \
    -X POST \
    -H "Content-Type:application/json" \
    -H "Authorization:JWT $(cat ${jwt_file})" \
    -d @- \
    "https://hub.docker.com/v2/repositories/${dockerhub_namespace}/${dockerhub_repo_name}/autobuild/"

elif [[ "$1" = "delete" ]]; then
  shift
  $0 check_login
  dockerhub_repo_name="$1";shift; [[ -z "$dockerhub_repo_name" ]] && { echo "parameter missing" >&2; exit 1; }
  read -p "If you are sure to delete the Repository: '${dockerhub_repo_name}' please type in the name again: " ENTERED_REPO_NAME
  [[ "$dockerhub_repo_name" != "$ENTERED_REPO_NAME" ]] && {
    echo "Entered Repository name: '${ENTERED_REPO_NAME}' does not match: '${dockerhub_repo_name}'" >&2; exit 1;
  }
  curl -s \
    -X DELETE \
    -H "Authorization:JWT $(cat ${jwt_file})" \
    "https://hub.docker.com/v2/repositories/${dockerhub_namespace}/${dockerhub_repo_name}/" \
  && echo "deleted"

elif [[ "$1" = "list" ]]; then
  shift
    # -H "Authorization:JWT $(cat ${jwt_file})" \
  response="$( curl -s \
    "https://hub.docker.com/v2/repositories/${dockerhub_namespace}/?page=1&page_size=10000" )"
  if [[ $short_output -eq 1 ]];then
    echo "$response" | jq -r '.results[]|"\(.namespace)/\(.name) \(.user) \(if (.is_private) then "private" else "" end )"'
  else
    echo "$response"
  fi

elif [[ "$1" = "info" ]]; then
  shift
  $0 check_login
  dockerhub_repo_name="$1";shift; [[ -z "$dockerhub_repo_name" ]] && { echo "parameter missing" >&2; exit 1; }
  curl -s \
    -H "Authorization:JWT $(cat ${jwt_file})" \
    "https://hub.docker.com/v2/repositories/${dockerhub_namespace}/${dockerhub_repo_name}/"

elif [[ "$1" = "tags" ]]; then
  shift
  $0 check_login
  dockerhub_repo_name="$1";shift; [[ -z "$dockerhub_repo_name" ]] && { echo "parameter missing" >&2; exit 1; }
  : ${page:="1"}
  result="$(curl -s \
    -H "Authorization:JWT $(cat ${jwt_file})" \
    "https://hub.docker.com/v2/repositories/${dockerhub_namespace}/${dockerhub_repo_name}/tags/?page=${page}&page_size=10000"
  )"
  if [[ $short_output -eq 1 ]];then
    echo "$result" \
      | jq -r '.results|sort_by(.last_updated)|map(.name)[]' 
  else
    echo "$result"
  fi

elif [[ "$1" = "catalog" ]]; then
  shift
  $0 check_login
  curl -i \
    -H "Authorization:JWT $(cat ${jwt_file})" \
    -H "Accept: application/json" \
    "https://hub.docker.com/v2/_catalog/"

elif [[ "$1" = "test" ]]; then
  shift
  $0 check_login
  dockerhub_repo_name="$1";shift; [[ -z "$dockerhub_repo_name" ]] && { echo "parameter missing" >&2; exit 1; }
  curl -s \
    -H "Authorization:JWT $(cat ${jwt_file})" \
    -H "Accept: application/json" \
    "https://hub.docker.com/v2/repositories/${dockerhub_namespace}/${dockerhub_repo_name}/tags/"

    # "https://hub.docker.com/v2/repositories/${dockerhub_namespace}/${dockerhub_repo_name}/tags/"
    # "https://hub.docker.com/v2/repositories/${dockerhub_namespace}/${dockerhub_repo_name}/buildhistory/?page_size=100"
    # "https://hub.docker.com/v2/repositories/${dockerhub_namespace}/${dockerhub_repo_name}/autobuild/"

    # "https://registry.docker.io/v2/"
    # "https://index.docker.io/v1/repositories/${dockerhub_repo_name}"
    # "https://hub.docker.com/v2/"

elif [[ "$1" = "build" ]]; then
  shift
  $0 check_login
  dockerhub_repo_name="$1";shift; [[ -z "$dockerhub_repo_name" ]] && { echo "parameter missing" >&2; exit 1; }
  curl -s \
    -H "Authorization:JWT $(cat ${jwt_file})" \
    -X POST \
    -H "Content-Type:application/json" \
    --data-binary '{"source_name":"master","source_type":"Branch","dockerfile_location":"/"}' \
    "https://hub.docker.com/v2/repositories/${dockerhub_namespace}/${dockerhub_repo_name}/autobuild/trigger-build/"

elif [[ "$1" = "history" ]]; then
  shift
  $0 check_login
  dockerhub_repo_name="$1";shift; [[ -z "$dockerhub_repo_name" ]] && { echo "parameter missing" >&2; exit 1; }
  curl -s \
    -H "Authorization:JWT $(cat ${jwt_file})" \
    "https://hub.docker.com/v2/repositories/${dockerhub_namespace}/${dockerhub_repo_name}/buildhistory/"

elif [[ "$1" = "buildcode" ]]; then
  shift
  $0 check_login
  dockerhub_repo_name="$1";shift; [[ -z "$dockerhub_repo_name" ]] && { echo "parameter missing" >&2; exit 1; }
  build_id="$1";shift; [[ -z "$build_id" ]] && { echo "parameter missing" >&2; exit 1; }
  curl -s \
    -H "Authorization:JWT $(cat ${jwt_file})" \
    "https://hub.docker.com/v2/repositories/${dockerhub_namespace}/${dockerhub_repo_name}/buildhistory/${build_id}/"

# https://hub.docker.com/v2/repositories/nasoym/bss_automation_demo/buildhistory/?page_size=100
# https://hub.docker.com/v2/repositories/nasoym/bss_automation_demo/buildhistory/b7qdkq6s3dcn2qvvn4euwmt/

elif [[ "$1" = "listgroups" ]]; then
  shift
  $0 check_login
  curl -s \
    -H "Authorization:JWT $(cat ${jwt_file})" \
    "https://hub.docker.com/v2/orgs/${dockerhub_namespace}/groups/"

elif [[ "$1" = "repogroups" ]]; then
  shift
  $0 check_login
  dockerhub_repo_name="$1";shift; [[ -z "$dockerhub_repo_name" ]] && { echo "parameter missing" >&2; exit 1; }
  curl -s \
    -H "Authorization:JWT $(cat ${jwt_file})" \
    -H "Accept: application/json" \
    "https://hub.docker.com/v2/repositories/${dockerhub_namespace}/${dockerhub_repo_name}/groups/"

elif [[ "$1" = "link-list" ]]; then
  shift
  $0 check_login
  dockerhub_repo_name="$1";shift; [[ -z "$dockerhub_repo_name" ]] && { echo "parameter missing" >&2; exit 1; }
  curl -s \
    -H "Authorization:JWT $(cat ${jwt_file})" \
    "https://hub.docker.com/v2/repositories/${dockerhub_namespace}/${dockerhub_repo_name}/links/" \
    | jq '.'

elif [[ "$1" = "link-add" ]]; then
  shift
  $0 check_login
  dockerhub_repo_name="$1";shift; [[ -z "$dockerhub_repo_name" ]] && { echo "parameter missing" >&2; exit 1; }
  linked_repo="$1";shift; [[ -z "$linked_repo" ]] && { echo "parameter missing" >&2; exit 1; }

  if [[ ! "${linked_repo}" =~ ^[^/]*/[^/]*$ ]];then
    linked_repo="${dockerhub_namespace}/${linked_repo}"
  fi
  curl -s \
    -H "Authorization:JWT $(cat ${jwt_file})" \
    -X POST \
    -H "Content-Type:application/json" \
    --data-binary "{\"to_repo\":\"${linked_repo}\"}" \
    "https://hub.docker.com/v2/repositories/${dockerhub_namespace}/${dockerhub_repo_name}/links/"

elif [[ "$1" = "link-del" ]]; then
  shift
  $0 check_login
  dockerhub_repo_name="$1";shift; [[ -z "$dockerhub_repo_name" ]] && { echo "parameter missing" >&2; exit 1; }
  linked_id="$1";shift; [[ -z "$linked_id" ]] && { echo "parameter missing" >&2; exit 1; }
  curl -s \
    -H "Authorization:JWT $(cat ${jwt_file})" \
    -X DELETE \
    "https://hub.docker.com/v2/repositories/${dockerhub_namespace}/${dockerhub_repo_name}/links/${linked_id}/"

elif [[ "$1" = "addgroup" ]]; then
  shift
  $0 check_login
  dockerhub_repo_name="$1";shift; [[ -z "$dockerhub_repo_name" ]] && { echo "parameter missing" >&2; exit 1; }
  group="$1";shift; [[ -z "$group" ]] && { echo "parameter missing" >&2; exit 1; }

  if [[ ! "$group" =~ ^[0-9]*$ ]]; then
    group_id="$(curl -s \
      -H "Authorization:JWT $(cat ${jwt_file})" \
      "https://hub.docker.com/v2/orgs/${dockerhub_namespace}/groups/?page_size=100" \
      | jq -M -r ".results[]|select(.name==\"${group}\")|.id?")"
  else
    group_id=$group
  fi

  if [[ -z "$group_id" ]];then
    echo "no group_id provided"
    exit 1
  fi
  
  curl -s \
    -H "Authorization:JWT $(cat ${jwt_file})" \
    -X POST \
    -H "Content-Type:application/json" \
    --data-binary "{\"group_id\":${group_id},\"permission\":\"admin\"}" \
    "https://hub.docker.com/v2/repositories/${dockerhub_namespace}/${dockerhub_repo_name}/groups/"

fi

